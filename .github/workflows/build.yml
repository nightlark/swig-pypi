name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*.*.*"


jobs:
  build_wheels:
    name: Build ${{ matrix.build }}${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            arch: "x86_64"
            build: ""
            use_qemu: false
          - os: ubuntu-20.04
            arch: "i686"
            build: ""
            use_qemu: false
          - os: ubuntu-20.04
            arch: "aarch64"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "aarch64"
            build: "musllinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "ppc64le"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "ppc64le"
            build: "musllinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "s390x"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "s390x"
            build: "musllinux_"
            use_qemu: true
          - os: windows-2019
            arch: "AMD64"
            msystem: "mingw64"
            mingw_env: "x86_64"
            build: ""
            use_qemu: false
          - os: windows-2019
            arch: "x86"
            msystem: "mingw32"
            mingw_env: "i686"
            build: ""
            use_qemu: false
          - os: macos-11
            arch: "x86_64 universal2 arm64"
            build: ""
            use_qemu: false


    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # ensure history is present for automatic versioning

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        if: runner.os == 'Linux' && matrix.use_qemu

      - name: Set up MSYS
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: >-
            mingw-w64-${{matrix.mingw_env}}-toolchain
        if: runner.os == 'Windows'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          CIBW_BUILD: "cp39-${{ matrix.build }}*"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distributions
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # ensure history is present for automatic versioning

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  check_dist:
    name: Check dist
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - run: pipx run twine check --strict dist/*

#  upload_pypi:
#    name: Upload to PyPI
#    needs: [build_wheels, build_sdist, check_dist]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.repository == 'nightlark/swig-pypi' && startsWith(github.ref, 'refs/tags/')
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#
#      - name: Upload to PyPI
#        uses: pypa/gh-action-pypi-publish@v1.4.2
#        with:
#          password: ${{ secrets.PYPI_PASSWORD }}
